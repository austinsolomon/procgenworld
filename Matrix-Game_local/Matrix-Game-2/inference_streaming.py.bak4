# wrapper that auto-feeds actions + shows progress, while delegating to your original script
import runpy, builtins, time, sys
from pathlib import Path

# --- detect which underlying script to run (prefer your saved original if present) ---
CANDIDATES = [
    Path("inference_streaming_original.py"),
    Path("inference_streaming.py.bak"),
]
underlying = next((p for p in CANDIDATES if p.exists()), None)
if underlying is None:
    print("[error] Neither inference_streaming_original.py nor inference_streaming.py.bak was found.")
    sys.exit(1)

# --- choreography ---
mouse_seq    =  (["K"] * 15) + (["I"] * 15) + (["L"] * 120) + (["U"] * 60)
keyboard_seq =  (["Q"] * (15 + 15 + 120)) + (["W"] * 60)

total_steps = len(mouse_seq)
mouse_idx   = 0
t0          = None
real_input  = builtins.input

def scripted_input(prompt=""):
    global mouse_idx, t0
    if "image path" in prompt:   # let you type it
        return real_input(prompt)
    if "mouse action" in prompt:
        if t0 is None: t0 = time.time()
        if mouse_idx < total_steps:
            mouse_idx += 1
            done = mouse_idx / total_steps
            elapsed = time.time() - t0
            eta = (elapsed / done) * (1 - done) if done > 0 else 0
            print(f"[progress] {done*100:5.1f}% | step {mouse_idx}/{total_steps} | "
                  f"elapsed {int(elapsed//60):02d}:{int(elapsed%60):02d} | "
                  f"eta {int(eta//60):02d}:{int(eta%60):02d}")
            return mouse_seq[mouse_idx-1]
    if "keyboard action" in prompt:
        return keyboard_seq[mouse_idx-1]
    if "Continue?" in prompt:   # auto-quit cleanly
        return "n"
    return "U"  # default no move

builtins.input = scripted_input
runpy.run_path(str(underlying), run_name="__main__")
